# Main server configuration for Bazar Marketplace

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name _;
    
    # Allow Let's Encrypt challenges
    location ^~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
        default_type "text/plain";
        try_files $uri =404;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    server_name _;
    
    root /var/www/html;
    index index.html index.php;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/bazar.crt;
    ssl_certificate_key /etc/nginx/ssl/bazar.key;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn perip 10;
    limit_conn perserver 100;
    
    # Static file handling
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|tar|gz)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }
    
    # Font files
    location ~* \.(woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files $uri =404;
    }
    
    # SVG files
    location ~* \.svg$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Content-Type "image/svg+xml";
        try_files $uri =404;
    }
    
    # Upload directory - secure access
    location /uploads/ {
        alias /var/www/html/uploads/;
        
        # Prevent execution of uploaded files
        location ~ \.(php|phtml|pl|py|jsp|asp|sh|cgi)$ {
            deny all;
        }
        
        # Allow only specific file types
        location ~* \.(jpg|jpeg|png|gif|webp|pdf|doc|docx|txt)$ {
            expires 30d;
            add_header Cache-Control "public";
            try_files $uri =404;
        }
    }
    
    # API endpoints with enhanced rate limiting
    location /backend/api/ {
        limit_req zone=api burst=50 nodelay;
        
        try_files $uri $uri/ @php;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://$host" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Authentication endpoints with strict rate limiting
    location ~ ^/backend/api/(login|register|password-reset) {
        limit_req zone=login burst=5 nodelay;
        
        try_files $uri $uri/ @php;
    }
    
    # Admin area with IP restrictions (customize as needed)
    location /admin/ {
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;
        
        try_files $uri $uri/ /admin/index.html;
        
        # Additional security headers for admin
        add_header X-Robots-Tag "noindex, nofollow" always;
    }
    
    # PHP-FPM handling
    location @php {
        fastcgi_pass php-fpm;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        
        # FastCGI cache
        fastcgi_cache fastcgi_cache;
        fastcgi_cache_valid 200 301 302 10m;
        fastcgi_cache_valid 404 1m;
        fastcgi_cache_bypass $cookie_PHPSESSID $http_authorization;
        fastcgi_no_cache $cookie_PHPSESSID $http_authorization;
        fastcgi_cache_use_stale error timeout updating http_500 http_503;
        
        # Buffer sizes
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        
        # Timeouts
        fastcgi_connect_timeout 60s;
        fastcgi_send_timeout 180s;
        fastcgi_read_timeout 180s;
    }
    
    # PHP files
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php-fpm;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        
        # Security
        fastcgi_param PHP_VALUE "open_basedir=$document_root:/tmp:/var/tmp";
    }
    
    # Frontend routes (SPA support)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache HTML files for short time
        location ~* \.html$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(sql|log|env|config|yml|yaml|ini)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Deny access to PHP config files
    location ~* ^/(config|includes|scripts)/ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Logging
    access_log /var/log/nginx/bazar_access.log main;
    error_log /var/log/nginx/bazar_error.log warn;
}