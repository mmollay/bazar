# Logstash configuration for Bazar Marketplace

input {
  # Nginx access logs
  file {
    path => "/var/log/app/nginx/bazar_access.log"
    start_position => "beginning"
    type => "nginx-access"
    codec => "json"
  }

  # Nginx error logs
  file {
    path => "/var/log/app/nginx/bazar_error.log"
    start_position => "beginning"
    type => "nginx-error"
  }

  # PHP application logs
  file {
    path => "/var/log/app/php_errors.log"
    start_position => "beginning"
    type => "php-error"
  }

  # PHP-FPM logs
  file {
    path => "/var/log/app/fpm-*.log"
    start_position => "beginning"
    type => "php-fpm"
  }

  # MySQL slow query logs
  file {
    path => "/var/log/app/mysql/slow.log"
    start_position => "beginning"
    type => "mysql-slow"
    codec => multiline {
      pattern => "^# Time:"
      negate => true
      what => "previous"
    }
  }

  # MySQL error logs
  file {
    path => "/var/log/app/mysql/error.log"
    start_position => "beginning"
    type => "mysql-error"
  }

  # Application specific logs
  file {
    path => "/var/log/app/application.log"
    start_position => "beginning"
    type => "application"
    codec => "json"
  }

  # Docker container logs
  docker {
    image_id => "bazar*"
    type => "docker"
  }
}

filter {
  # Add common fields
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "application" => "bazar-marketplace" }
    add_field => { "[@metadata][index_prefix]" => "bazar" }
  }

  # Nginx access log parsing
  if [type] == "nginx-access" {
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - %{DATA:user_name} \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{INT:response_code} %{INT:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:user_agent}\" \"%{DATA:x_forwarded_for}\" rt=%{NUMBER:request_time} uct=\"%{DATA:upstream_connect_time}\" uht=\"%{DATA:upstream_header_time}\" urt=\"%{DATA:upstream_response_time}\""
      }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    mutate {
      convert => {
        "response_code" => "integer"
        "body_sent_bytes" => "integer"
        "request_time" => "float"
      }
    }
    
    # GeoIP lookup
    geoip {
      source => "client_ip"
      target => "geoip"
      database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
    }
    
    # User agent parsing
    useragent {
      source => "user_agent"
      target => "ua"
    }
    
    # URL parsing
    grok {
      match => { "url" => "/%{DATA:endpoint}(?:\?%{GREEDYDATA:query_params})?" }
      tag_on_failure => ["_url_parse_failure"]
    }
  }

  # Nginx error log parsing
  if [type] == "nginx-error" {
    grok {
      match => { 
        "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{POSINT:pid}#%{NUMBER:tid}: (\*%{NUMBER:connection_id} )?%{GREEDYDATA:error_message}(, client: %{IPORHOST:client_ip})?(, server: %{IPORHOST:server})?(, request: \"%{WORD:http_method} %{URIPATH:url}( HTTP/%{NUMBER:http_version})?\")?.*"
      }
    }
    
    date {
      match => [ "timestamp", "yyyy/MM/dd HH:mm:ss" ]
    }
  }

  # PHP error log parsing
  if [type] == "php-error" {
    grok {
      match => { 
        "message" => "\[%{DATA:timestamp}\] PHP %{WORD:error_type}: %{GREEDYDATA:error_message} in %{DATA:file} on line %{INT:line}"
      }
    }
    
    date {
      match => [ "timestamp", "dd-MMM-yyyy HH:mm:ss UTC" ]
    }
  }

  # MySQL slow query parsing
  if [type] == "mysql-slow" {
    grok {
      match => { 
        "message" => "# Time: %{DATA:timestamp}\s*# User@Host: %{DATA:user_host}\s*# Query_time: %{NUMBER:query_time}\s*Lock_time: %{NUMBER:lock_time}\s*Rows_sent: %{INT:rows_sent}\s*Rows_examined: %{INT:rows_examined}\s*%{GREEDYDATA:query}"
      }
    }
    
    mutate {
      convert => {
        "query_time" => "float"
        "lock_time" => "float"
        "rows_sent" => "integer"
        "rows_examined" => "integer"
      }
    }
  }

  # Application log parsing
  if [type] == "application" {
    if "_jsonparsefailure" not in [tags] {
      date {
        match => [ "timestamp", "ISO8601" ]
      }
    }
  }

  # Clean up fields
  mutate {
    remove_field => [ "host", "path" ]
  }

  # Add severity levels
  if [log_level] {
    if [log_level] in ["emerg", "alert", "crit", "error", "ERROR"] {
      mutate { add_field => { "severity" => "error" } }
    } else if [log_level] in ["warn", "warning", "WARN"] {
      mutate { add_field => { "severity" => "warning" } }
    } else if [log_level] in ["notice", "info", "INFO"] {
      mutate { add_field => { "severity" => "info" } }
    } else {
      mutate { add_field => { "severity" => "debug" } }
    }
  }

  # Response time categorization
  if [request_time] {
    if [request_time] < 0.1 {
      mutate { add_field => { "response_category" => "fast" } }
    } else if [request_time] < 1.0 {
      mutate { add_field => { "response_category" => "normal" } }
    } else if [request_time] < 5.0 {
      mutate { add_field => { "response_category" => "slow" } }
    } else {
      mutate { add_field => { "response_category" => "very_slow" } }
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch-logs:9200"]
    index => "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"
    template_name => "bazar-template"
    template_pattern => "bazar-*"
    template => "/usr/share/logstash/templates/bazar-template.json"
    template_overwrite => true
  }

  # Debug output (remove in production)
  # stdout { codec => rubydebug }

  # Send critical errors to alerting system
  if [severity] == "error" and [type] in ["application", "php-error"] {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      headers => { "Content-Type" => "application/json" }
      mapping => {
        "alerts" => [{
          "labels" => {
            "alertname" => "ApplicationError"
            "severity" => "warning"
            "application" => "bazar-marketplace"
            "type" => "%{type}"
          }
          "annotations" => {
            "summary" => "Application error detected"
            "description" => "%{message}"
          }
        }]
      }
    }
  }
}